Introducing Hooks
- Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
- Hooks don't work inside classes

Why Hooks?
1. Understand how this keyword works in JavaScript
  - Remember to bind event handlers in a class component
  - On React side, classes don't minify very well and make hot reloading very unreliable

2. HOC an Render Props Patterns
  - There is no particular way to reuse a stateful component logic
  - HOC and Render Props Pattern don't address this problem
  - Makes the code harder to follow

3. When creating coponents for complex logic such as data fetching and subscribing to events, the related code is not organized in one place.
 ex. 
  1. Data fetching can be done in componentDidMount and sometimes in componentDidUpdate.
  2. Event listeners, in componentDidMount and componentWillUnmont

Because of stateful logic - cannot break components int smaller ones

Hence, there is a need to to share a stateful logic in a better way

Noteworthy Points
 - React version >= 16.8
 - Completly opt to
 - Hooks don't contain any breaking changes and release in 100% backward compatible logic.
 - Classes won't be removed
 - Can't use Hooks inside class component, but your app can mix Hooks inside functional component and class components without Hooks
 - Hooks don't replace your exising knowledge of React concepts
 - Instead, hooks provide a direct api to the React concepts you already know.

 *********************************************************************
 Rules of Hooks
  1. "Only call Hooks at the top level"
    - Don't call Hooks inside loops, conditions, or nested functions
  2. "Only call Hooks from React Functions"
    - Call them within React functional components and not just regular JavaScript functions
 *********************************************************************
useState
 - When updating a state based on the previous state value, pass in a function to the state setter.
 - A state variable can be a number, string, boolean, an object or even an array.
 - The setter function provided by useState Hook doesn't automatically merge an update object, you have to manually update the object and pass the value to the setter function. There is a similar scenario when updating arrays.

 Summary:
  * The useState Hook lets you add a state to a functional component
  * It creates a single piece of state
  * In classes, the state is always an object
  * With useState Hook, the state doesn't have to be an object
  * The useStae Hook returns and array with 2 elements
  * The first element is the  current value of the state, and the second element is a state setter function
  * If new state value depends on previous state value, you need to pass a function to the setter function
  * When dealing with objects or arrays, make sure to spread your state variable and then call the setter function

 *********************************************************************
 ex. HookCounter.js, HookCounterTwo.js, HookCounterThree.js and HookCounterFour.js
 *********************************************************************

Using the Effect Hook

- The Effect Hook lets you perform side effects in function components
- It runs after every render of a component. conceptually, it was what we were doing with class component -componentDidMount and componentDidUpdate lifecycle methods
- It is placed inside the component and this way we can easily access the component state and props without having to write extra code

Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects. Whether or not you’re used to calling these operations “side effects” (or just “effects”), you’ve likely performed them in your components before.  

**********************************************************************
Tip
  If you’re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.

**********************************************************************
Hooks Optimazation
 You can tell React to skip applying an effect if certain values haven’t changed between re-renders. To do so, pass an array as an optional second argument to useEffect.

ex. EffectHookCounterTwo.js 

**********************************************************************
We can mimic componentDidMount using useEffect by passing in an empty array as the second argument of useEffect. This will help us to run a piece of code only once.

ex. EffectHookCounterThree.js 
**********************************************************************

Effects with cleanup

  You might be thinking that we’d need a separate effect to perform the cleanup. But code for adding and removing a subscription is so tightly related that useEffect is designed to keep it together. If your effect returns a function, React will run it when it is time to clean up:

  ex. EffectHookCounterThree.js and EffectHookFour.js

More concepts:
  - Ex of depandency: IntervalHookCounter.js
  - Define a function inside useEffect if you want to call a the function within useEffect. This way it will be easy for you to track the dependencies.
  - It is possible to have multiple useEffect implementations and our code will be clean and organized. Ex. React doc

**********************************************************************
